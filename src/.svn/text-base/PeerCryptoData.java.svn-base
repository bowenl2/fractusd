import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.X509EncodedKeySpec;
import javax.crypto.spec.SecretKeySpec;
import org.bouncycastle.jce.interfaces.ECPublicKey;
import org.bouncycastle.util.encoders.Base64;


public class PeerCryptoData {
	private String encodedKey;
	private SecretKeySpec sks;
	
	private static void log(String msg) {
		System.out.println("PeerCryptoData: " + msg);
	}
	
	public SecretKeySpec getSecretKeySpec() {
		return sks;
	}
	
	public static PeerCryptoData negotiate(Headers headerParams, EncryptionManager em)
	throws NoSuchAlgorithmException,
	NoSuchProviderException,
	InvalidKeySpecException {
		PeerCryptoData pcd = new PeerCryptoData();

		if (headerParams.get("key-encoding") == null ||
				!headerParams.get("key-encoding").equals("X.509")) {
			log("error: could not recognize that key encoding.");
			return null;
		}
		
		pcd.encodedKey = headerParams.get("key");
		if (pcd.encodedKey == null) {
			log("error: did not receive foreign public key.");
			return null;
		}		
		
		
		log("trying to derive secret key from ours and " + pcd.encodedKey);
		// Get the byte[] decoded key
		byte[] keyBytes = Base64.decode(pcd.encodedKey);
		
		// Create their public key object for ECDH
		KeySpec ks = new X509EncodedKeySpec(keyBytes);
		PublicKey pubkey;
		KeyFactory kf = KeyFactory.getInstance("ECDH", "BC");
		pubkey = kf.generatePublic(ks);
		
		// Extract CipherParameters	
		pcd.sks = em.deriveKey((ECPublicKey)pubkey);
		return pcd;
	}
	
	public String getEncodedKey() {
		return encodedKey;
	}
}
